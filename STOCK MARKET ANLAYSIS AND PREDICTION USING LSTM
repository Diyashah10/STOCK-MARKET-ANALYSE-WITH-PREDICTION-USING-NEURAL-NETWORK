!pip install numpy pandas matplotlib yfinance scikit-learn tensorflow
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import yfinance as yf
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, LSTM

# Step 1: Download Stock Data
def download_stock_data(ticker, start_date, end_date):
    data = yf.download(ticker, start=start_date, end=end_date)
    return data

# Step 2: Preprocess the Data
def preprocess_data(data, time_step=60):
    # Use the 'Close' column for prediction
    data_close = data['Close'].values
    data_close = data_close.reshape(-1, 1)

    # Scale the data
    scaler = MinMaxScaler(feature_range=(0, 1))
    scaled_data = scaler.fit_transform(data_close)

    # Create sequences
    X, y = [], []
    for i in range(len(scaled_data) - time_step - 1):
        X.append(scaled_data[i:(i + time_step), 0])
        y.append(scaled_data[i + time_step, 0])
    X, y = np.array(X), np.array(y)

    # Reshape the data for LSTM input
    X = X.reshape(X.shape[0], X.shape[1], 1)

    return X, y, scaler

# Step 3: Build the LSTM Model
def build_lstm_model(input_shape):
    model = Sequential()
    model.add(LSTM(units=50, return_sequences=True, input_shape=input_shape))
    model.add(LSTM(units=50, return_sequences=False))
    model.add(Dense(units=25))
    model.add(Dense(units=1))

    model.compile(optimizer='adam', loss='mean_squared_error')
    return model

# Step 4: Train the Model
def train_model(model, X_train, y_train, epochs=10, batch_size=64):
    model.fit(X_train, y_train, epochs=epochs, batch_size=batch_size)
    return model

# Step 5: Predict and Visualize
def predict_and_visualize(model, X_test, y_test, scaler):
    predictions = model.predict(X_test)
    predictions = scaler.inverse_transform(predictions)

    y_test = y_test.reshape(-1, 1)
    y_test = scaler.inverse_transform(y_test)

    plt.figure(figsize=(10,6))
    plt.plot(y_test, color='blue', label='Actual Stock Price')
    plt.plot(predictions, color='red', label='Predicted Stock Price')
    plt.title('Stock Price Prediction')
    plt.xlabel('Time')
    plt.ylabel('Stock Price')
    plt.legend()
    plt.show()

# Step 6: Predict Future Stock Prices
def predict_future_price(model, recent_data, scaler, time_step=60):
    recent_data_scaled = scaler.transform(recent_data.reshape(-1, 1))
    recent_data_scaled = recent_data_scaled.reshape(1, time_step, 1)
    predicted_price_scaled = model.predict(recent_data_scaled)
    predicted_price = scaler.inverse_transform(predicted_price_scaled)
    return predicted_price

# Main Function
def main():
    # Parameters
    ticker = 'AAPL'
    start_date = '2010-01-01'
    end_date = '2023-01-01'
    time_step = 60

    # Download and preprocess the data
    data = download_stock_data(ticker, start_date, end_date)
    X, y, scaler = preprocess_data(data, time_step)

    # Split data into training and testing sets
    train_size = int(len(X) * 0.8)
    X_train, X_test = X[:train_size], X[train_size:]
    y_train, y_test = y[:train_size], y[train_size:]

    # Build and train the model
    model = build_lstm_model((X_train.shape[1], 1))
    model = train_model(model, X_train, y_train, epochs=10, batch_size=64)

    # Predict and visualize results
    predict_and_visualize(model, X_test, y_test, scaler)

    # Predict future stock prices
    recent_data = data['Close'][-time_step:].values
    predicted_price = predict_future_price(model, recent_data, scaler, time_step)
    print(f"Predicted price for the next day: ${predicted_price[0][0]:.2f}")

if __name__ == "__main__":
    main()
